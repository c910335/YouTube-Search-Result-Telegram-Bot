class YouTube
  attr_accessor :service

  def initialize
    @service = Google::Apis::YoutubeV3::YouTubeService.new
    service.client_options.application_name = 'YouTube Search Result Telegram Bot'
    service.authorization = auth
  end

  def search(q)
    service.list_searches(
      'snippet',
      max_results: 50,
      q: q,
      type: 'video',
      published_after: DateTime.now - 35.minutes
    ).items.map { |video| Video.new(video.id.video_id, video.snippet.title, video.snippet.channel_title) }
  end

  def new_playlist(username, query)
    playlist = service.insert_playlist(
      'snippet,status',
      Google::Apis::YoutubeV3::Playlist.new(
        snippet: {
          title: "#{username} #{query}",
          description: "This is a playlist auto generated by YTSRTB for #{username} that searches \"#{query}\"."
        },
        status: {
          privacy_status: 'unlisted'
        }))
    playlist.id
  end

  def delete_playlist(playlist_id)
    service.delete_playlist(playlist_id)
  end

  def clear_playlist(playlist_id, username, query)
    delete_playlist(playlist_id)
    new_playlist(username, query)
  end

  def insert_video(playlist_id, video_id)
    service.insert_playlist_item(
      'snippet',
      Google::Apis::YoutubeV3::PlaylistItem.new(
        snippet: {
          playlist_id: playlist_id,
          resource_id: {
            kind: 'youtube#video',
            video_id: video_id
          }
        }
      )
    )
  end

  def auth
    user_id = Config::GOOGLE_USER_ID
    uri = 'urn:ietf:wg:oauth:2.0:oob'
    scope = 'https://www.googleapis.com/auth/youtube.force-ssl'
    client_id = Google::Auth::ClientId.from_file('./client_secret.json')
    token_store = Google::Auth::Stores::FileTokenStore.new(file: 'tokens.yml')
    authorizer = Google::Auth::UserAuthorizer.new(client_id, scope, token_store)
    credentials = authorizer.get_credentials(user_id)
    if credentials.nil?
      url = authorizer.get_authorization_url(base_url: uri )
      puts "Open #{url} in your browser and enter the resulting code:"
      code = gets
      credentials = authorizer.get_and_store_credentials_from_code(
        user_id: user_id, code: code, base_url: uri)
    end
    credentials
  end
end
